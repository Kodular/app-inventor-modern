// -*- mode: java; c-basic-offset: 2; -*-
// Copyright 2009-2011 Google, All Rights reserved
// Copyright 2011-2021 MIT, All rights reserved
// Released under the Apache License, Version 2.0
// http://www.apache.org/licenses/LICENSE-2.0
package com.google.appinventor.buildserver.util

import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.IOException
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

/**
 * AabZipper receives the source directory with the Android App Bundle previosuly generated by
 * [com.google.appinventor.buildserver.AabCompiler] and builds from it a ZIP file, placed into the specified
 * destination file.
 *
 * @author diego@barreiro.xyz (Diego Barreiro)
 */
object AabZipper {
    fun zipBundle(src: File, dest: File, root: String): Boolean {
        return try {
            FileOutputStream(dest).use { fos ->
                ZipOutputStream(fos).use { zipOut ->
                    zipFile(src, src.name, zipOut, root)
                }
            }
            true
        } catch (e: IOException) {
            e.printStackTrace()
            false
        }
    }

    @Throws(IOException::class)
    private fun zipFile(fileToZip: File, fileName: String, zipOut: ZipOutputStream, root: String) {
        if (fileToZip.isHidden) return
        var zipFileName = fileName
        if (zipFileName.startsWith(root)) {
            zipFileName = zipFileName.substring(root.length)
        }
        val windows: Boolean = File.separator != "/"
        if (windows) {
            zipFileName = zipFileName.replace(File.separator, "/")
        }
        if (fileToZip.isDirectory) {
            if (zipFileName.endsWith("/")) {
                zipOut.putNextEntry(ZipEntry(zipFileName))
            } else {
                zipOut.putNextEntry(ZipEntry("$zipFileName/"))
            }
            zipOut.closeEntry()

            fileToZip.walk().filter { it.isFile }.forEach { childFile ->
                zipFile(childFile, fileName + File.separator + childFile.name, zipOut, root)
            }
            return
        }
        val fis = FileInputStream(fileToZip)
        val zipEntry = ZipEntry(zipFileName)
        zipOut.putNextEntry(zipEntry)
        val bytes = ByteArray(1024)
        var length: Int
        while (fis.read(bytes).also { length = it } >= 0) {
            zipOut.write(bytes, 0, length)
        }
        fis.close()
    }
}